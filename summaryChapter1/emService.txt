EM Service:

-(void) estimationStep
{
	int i;
	int N = numberOfSamples;
	int count = 0;
	EMGaussianMultivariate *theta = [chain lastElement];
	dcgGaussianMultivariate *workingGaussian;
	dcgVector *denominatorWeights = [[dcgVector alloc] initWithLength:M];
	double *D = [denominatorWeights localVector];
	double **A = [Amatrix localMatrix];
	
	NSEnumerator *thetaEnum;
	
	thetaEnum = [[theta gaussianStructure] objectEnumerator];
	
	for ( i = 0; i < N; i++)
	{
		count = 0;
		while ( (workingGaussian = [thetaEnum nextObject])!= nil)
		{
			A[i][count] = [workingGaussian weight] * [workingGaussian probability:[Y rowVector:i]];
			D[count] += A[i][count++];
		}
		for ( count = 0; count < M; count++)
			A[i][count] /= D[count];
	}
}


// Generates another element in theta
-(void) maximizationStep
{
	int i, j;
	int N = numberOfSamples;
	int M = numberOfClasses;
	dcgVector *denominatorWeights = [[dcgVector alloc] initWithLenght:M];
	double *D = [denominatorWeights localVector];
	double **A = [Amatrix localMatrix];
	double **Y = [samples localMatrix];
	
	
	EMGaussianMultivariate *lastStep = [chain lastElement];
	EMGaussianMultivariate *nextStep;
	
	dcgGaussianMultivariate *workingGaussian;
	dcgVector *mui;
	dcgVector *sumI;
	dcgVector *difference;
	dcgMatrix *differenceMatrix;
	dcgMatrix *muiMatrix;
	dcgMatrix *sigmaI;
	dcgVector *proportions;
	double *alpha = [proportions localVector];
	
	for ( i = 0; i < N; i++)
		for (j = 0; j < M; j++  )
		{
			D[j] += A[i][j];
		}
	
	for ( j = 0; j < M; j++)
	{
		mui = [[dcgVector alloc] initWithLength:N];
		sumI = [[dcgVector alloc] initWithLength:N];
		for ( i = 0; i < N; i++)
		{
			[sumI addVector: [[sample rowVector:i] multiplyByScalar:A[i][j]]];
		}
		mui = [sumI divideScalar:D[j]];
		// Construct y - mui
		differenceMatrix = [[dcgMatrix alloc] initWithRows:M columns:N];
		for ( i = 0; i < N; i++)
		{
			difference = [[samples rowVector:i] subtractVector:mui];
			[difference multiplyByScalar:sqrt(A[i][j])];
			[differenceMatrix insertVector:difference atColumn:i];
		}
		sigmaI = [differenceMatrix multiplyMatrix:[differenceMatrix transpose]];
		workingGaussian = [[dcgGaussianMultivariate alloc] initWithMean:mui
												covariance:sigmaI];
		[[nextStep gaussianStructure] addObject:workingGaussian];
		[workingGaussian release];
		[mui release];
		[sumI release];
		alpha[j] = D[j] / N;
	}
}